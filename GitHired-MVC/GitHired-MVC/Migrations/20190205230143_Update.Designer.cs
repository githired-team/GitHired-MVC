// <auto-generated />
using GitHired_MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GitHired_MVC.Migrations
{
    [DbContext(typeof(GitHiredDBContext))]
    [Migration("20190205230143_Update")]
    partial class Update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GitHired_MVC.Models.Board", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FocusID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("FocusID")
                        .IsUnique();

                    b.ToTable("Board");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FocusID = 1,
                            Name = "Default Board"
                        });
                });

            modelBuilder.Entity("GitHired_MVC.Models.Card", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColumnID");

                    b.Property<string>("CompanyName");

                    b.Property<bool>("CoverLetterCheck");

                    b.Property<string>("Description");

                    b.Property<string>("JobTitle");

                    b.Property<bool>("ResumeCheck");

                    b.Property<string>("Wage");

                    b.HasKey("ID");

                    b.HasIndex("ColumnID");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("GitHired_MVC.Models.Column", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoardID");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.HasKey("ID");

                    b.HasIndex("BoardID");

                    b.ToTable("Column");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BoardID = 1,
                            Name = "Default Column 1",
                            Order = 1
                        },
                        new
                        {
                            ID = 2,
                            BoardID = 1,
                            Name = "Default Column 2",
                            Order = 2
                        },
                        new
                        {
                            ID = 3,
                            BoardID = 1,
                            Name = "Default Column 3",
                            Order = 3
                        });
                });

            modelBuilder.Entity("GitHired_MVC.Models.Focus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverLetter");

                    b.Property<string>("DesiredPosition");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<string>("ResumeLink");

                    b.Property<string>("Skill");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Focus");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CoverLetter = "Test Cover Letter",
                            DesiredPosition = "Test Position",
                            Location = "Testville, USA",
                            Name = "Test Focus",
                            ResumeLink = "Test Resume Link",
                            Skill = "ASP.NET Core",
                            UserID = 1
                        });
                });

            modelBuilder.Entity("GitHired_MVC.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar");

                    b.Property<string>("Email");

                    b.Property<string>("GitHubLink");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Avatar = "Test Avatar",
                            Email = "test@test.com",
                            GitHubLink = "http://www.github.com/testuser",
                            Name = "Test User"
                        });
                });

            modelBuilder.Entity("GitHired_MVC.Models.Board", b =>
                {
                    b.HasOne("GitHired_MVC.Models.Focus", "Focus")
                        .WithOne("Board")
                        .HasForeignKey("GitHired_MVC.Models.Board", "FocusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GitHired_MVC.Models.Card", b =>
                {
                    b.HasOne("GitHired_MVC.Models.Column", "Column")
                        .WithMany("Card")
                        .HasForeignKey("ColumnID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GitHired_MVC.Models.Column", b =>
                {
                    b.HasOne("GitHired_MVC.Models.Board", "Board")
                        .WithMany("Column")
                        .HasForeignKey("BoardID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GitHired_MVC.Models.Focus", b =>
                {
                    b.HasOne("GitHired_MVC.Models.User", "User")
                        .WithMany("Focus")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
